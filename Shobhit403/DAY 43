#include <bits/stdc++.h>
using namespace std;
const int Maxn = 2505;
const int Maxk = 10;
vector <int> under[1 << Maxk];
int t;
int n, m, k;
int A[Maxn];
vector <int> neigh[Maxn];
int dp1[Maxn][1 << Maxk], dp2[Maxn][1 << Maxk];
void Gen3(int lvl, int mask1, int mask2){
    if (lvl >= Maxk) under[mask1].push_back(mask2);
    else {
        Gen3(lvl + 1, mask1, mask2);
        Gen3(lvl + 1, mask1 | 1 << lvl, mask2);
        Gen3(lvl + 1, mask1 | 1 << lvl, mask2 | 1 << lvl);
    }
}
void Solve(int v){
    fill(dp1[v], dp1[v] + (1 << k), Maxn);
    fill(dp2[v], dp2[v] + (1 << k), Maxn);
    if (neigh[v].empty()) {
        dp1[v][1 << A[v]] = dp1[v][0] = 1;
        dp2[v][1 << A[v]] = 1;
        dp2[v][0] = 0;
    }
    else {
        if (neigh[v].size() == 1) {
            int a = neigh[v][0];
            Solve(a);
            for (int j = 0; j < 1 << k; j++) {
                dp1[v][j | 1 << A[v]] = min(dp1[v][j | 1 << A[v]], dp2[a][j] + 1);
                dp2[v][j | 1 << A[v]] = min(dp2[v][j | 1 << A[v]], dp2[a][j] + 1);
                dp2[v][j] = min(dp2[v][j], dp1[a][j]);
            }
        } 
        else {
            int a = neigh[v][0];
            int b = neigh[v][1];
            Solve(a); Solve(b);
            for (int j = 0; j < 1 << k; j++)
                for (int z = 0; z < under[j].size(); z++) {
                    int c = under[j][z];
                    int cand = dp2[a][c] + dp2[b][j ^ c] + 1;
                    dp1[v][j | 1 << A[v]] = min(dp1[v][j | 1 << A[v]], cand);
                    dp2[v][j | 1 << A[v]] = min(dp2[v][j | 1 << A[v]], cand);
                    dp2[v][j] = min(dp2[v][j], dp1[a][c] + dp1[b][j ^ c]);
                }
        }
        for (int j = 0; j < k; j++)
            for (int i = 0; i < 1 << k; i++) if (i & 1 << j) {
                dp1[v][i ^ 1 << j] = min(dp1[v][i ^ 1 << j], dp1[v][i]);
                dp2[v][i ^ 1 << j] = min(dp2[v][i ^ 1 << j], dp2[v][i]);
            }
    }
}
int main(){
    Gen3(0, 0, 0);
    scanf("%d", &t);
    while (t--) {
        scanf("%d %d %d", &n, &m, &k);
        for (int i = 1; i <= n; i++) {
            scanf("%d", &A[i]); A[i]--;
            neigh[i].clear();
        }
        for (int i = 0; i < m; i++) {
            int a, b; scanf("%d %d", &a, &b);
            neigh[a].push_back(b);
        }
        Solve(1);
        int res = dp2[1][(1 << k) - 1];
        printf("%d\n", res < Maxn? res: -1);
    }
    return 0;
}
