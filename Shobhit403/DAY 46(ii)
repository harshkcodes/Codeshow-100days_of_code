#include<iostream>
#include<set>
#include<unordered_map>
#include<map>
#include<vector>
#include<climits>
#include<algorithm>
#include<iterator>
#include<cstdio>
#define init_arr(a, k, n) for(int i = 0; i < n; i++) a[i] = k
#define print_arr(a, n) for(int i = 0; i < n; i++) cout << a[i] << endl
typedef long long int ll;
#define kickprint(x, y) printf("Case #%d: %d\n", x, y)
#define inf INT_MAX
using namespace std;
template<class T>
ostream& operator << (ostream& out, vector<T> v){
    for(T& i: v)
        out << i << " ";
    out << endl;
    return out;
}
vector<int> adj[int(2 * 1e5 + 1)];
vector<bool>vis(int(2 * 1e5 + 1), false);
bool flag;
struct Node{
    int a, b, c, d;
};
vector<Node>ans;
bool dfs(int v, int par){
    if(flag == false)
        return false;
    vector<int> child;
    vis[v] = true;
    for(int u: adj[v]){
        if(!vis[u] && dfs(u, v) && child.size() < 3){
            child.push_back(u);
            if(child.size() == 3){
                Node N;
                N.a = v;
                N.b = child[0];
                N.c = child[1];
                N.d = child[2];
                ans.push_back(N);
                child.clear();
                // return false;
            }
        }
        if(flag == false)
            return false;
    }
    if(child.size() == 2 && par != -1){
        Node N;
        N.a = v;
        N.b = child[0];
        N.c = child[1];
        N.d = par;
        ans.push_back(N);
        return false;
    }
    if(child.size() == 0)
        return true;
    flag = false;
    return false;
}
void solve(){
    int n;
    cin >> n;
    for(int i = 1; i <= n; i++){
        adj[i].clear();
        vis[i] = false;
    }
    flag = true;
    ans.clear();
    for(int i = 1; i <= n - 1; i++){
        int u, v;
        cin >> u >> v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }    
    if((n - 1) % 3 != 0)
        cout << "NO\n";
    else{
        // cout << "flag\n";
        dfs(1, -1);
        if(flag == true){
            cout << "YES\n";
            for(auto& n: ans){
                cout << n.a << " " << n.b << " " << n.c << " " << n.d;
                cout << endl;
            }
        }else{
            cout << "NO\n";
        }
    }
    
}
int main(){
    int t;
    cin >> t;
    while(t--)
        solve();
}
