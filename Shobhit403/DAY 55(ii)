#include <stdio.h>
int T, N, K;
int main(void) 
{
    int res, flag, startPos, i, j;
    scanf("%d", &T);
    while(T--)
    {
        scanf("%d %d", &N, &K);
        int A[N], temp[N], opSeq[N], opSeqIndx;
        /* read-in the sequence */
        for(i = 0; i < N; i++){
            scanf("%d", &A[i]);
            temp[i] = A[i];
        }
        /* if an element is operated before its circular neighbours, 
        it will not appear in final result. Elements with 1's in bit 
        positions where K has 0's need to be eliminated. So they should 
        be operated on priority. */
        for(i = 0; i < N; i++){
            temp[i] &= ~K;
        }
        flag = 0;
        opSeqIndx = 0;
        for(i = 0; i < N; i++){
            if(temp[i]){            /* priority element */
                if(temp[(i-1+N)%N] || temp[(i+1)%N]){
                    /* adjacent elements cannot be also priority */
                    flag = 1;
                    break;
                }       
                opSeq[opSeqIndx] = i + 1;
                opSeqIndx++;
            }
        }
        /* no sequence exists */
        if(flag){
            printf("%d\n", -1);
            continue;
        }
        if(opSeqIndx != 0){
            /* start from right of a priority element and go clock-wise */
            res = 0;
            i = startPos = ((opSeq[0]-1) + 1)%N;
            do{
                if(!temp[i]){
                    res |= A[i];
                    opSeq[opSeqIndx] = i + 1;
                    opSeqIndx++;
                }
                i = (i + 1)%N;
            }while(i != startPos);
            
            if(res != K){               /* no sequence exists */
                printf("%d\n", -1);
            }
            else{                       /* output operation sequence */
                for(i = 0; i < N; i++){
                    printf("%d ", opSeq[i]);
                }
                printf("\n");
            }
        }
        else{       
            /* no priority elements, decide which element to start from */
            
            /* calculate the prefix values Pi */
            int P[N]; P[0] = A[0];
            for(i = 1; i < N; i++){
                P[i] = P[i-1] | A[i];
            } 
            /* calculate the suffix values Si */
            int S[N]; S[N-1] = A[N-1];
            for(i = N-2; i >= 0; i--){
                S[i] = S[i+1] | A[i];
            }
            for(i = 0; i < N; i++){
                if(i == 0)
                    res = S[1];
                else if(i == N-1)
                    res = P[N-2];
                else
                    res = P[i-1] | S[i+1];
                
                if(res == K)
                    break;
            }
            if(res != K){               /* no sequence exists */
                printf("%d\n", -1);
            }
            else{                       /* output operation sequence */
                opSeqIndx = 0;
                opSeq[opSeqIndx] = i + 1; opSeqIndx++;
                j = (i + 1)%N;
                do{
                    opSeq[opSeqIndx] = j + 1;
                    opSeqIndx++;
                    j = (j + 1)%N;
                }while(j != i);
            
                for(i = 0; i < N; i++){
                    printf("%d ", opSeq[i]);
                }
                printf("\n");
            }
        }
    }  
	return 0;
}
