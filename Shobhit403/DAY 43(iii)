#include "bits/stdc++.h"
using namespace std;
const long long inf = 5e12L;
const int N = 5e3 + 2;
long long dp[N];
signed main() {
	ios_base :: sync_with_stdio(false);
	cin.tie(0);
	cout.tie(0);
	int t;
	cin >> t;
	while(t--) {
		int n, x;
		cin >> n >> x;
		vector<long long> a(n + 2), b(n + 2), p(n + 2);
		int cnt = 0;
		a[0] = b[0] = b[n + 1] = p[0] = 0;
		for(int i = 1; i <= n; ++i) {
			cin >> a[i];
			cnt += !a[i];
			b[i] = a[i];
			p[i] = p[i - 1] + a[i];
			a[i] = a[i - 1] + a[i] * i;
		}
		if(cnt == n) {cout << "0\n"; continue;}
		for(int i = 1; i <= n; ++i) b[i] = b[i - 1] + (n - i + 1) * b[i];
		fill(dp, dp + n + 2, inf);
		dp[0] = -x;
		for(int i = 1; i <= n + 1; ++i) {
			for(int k = i == n + 1; k < i; ++k) {
				long long X = 0;
				if(k + 1 >= i);
				else if(!k) X = b[i - 1] - (n - i + 1) * p[i - 1];
				else if(i > n) X = (a[n] - a[k]) - k * (p[n] - p[k]);
				else {
					int mid = (i + k) / 2;
					X = (a[mid] - a[k]) - k * (p[mid] - p[k]) + (b[i - 1] - b[mid]) - (n - i + 1) * (p[i - 1] - p[mid]);
				}
				dp[i] = min(dp[i], dp[k] + X + x);
			}
		}
		cout << dp[n + 1] << '\n';
	}
 	return 0;
}
