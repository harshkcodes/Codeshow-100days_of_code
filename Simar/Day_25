#include <iostream>
#include <bits/stdc++.h>

using namespace std;


class Node{
public:
    int data;
    Node * next;
Node(int data){
    this->data=data;   //(*this).data=data;
    this->next=NULL;
}
};

void print(Node * head){
    //Node * temp=head;
    while(head!=NULL){
    cout<<head->data<<"  ";
    head=head->next;
    }
    /*temp=head;
    while(temp!=NULL){
    cout<<temp->data<<endl;
    temp=temp->next;
    }*/
}

 int nth_node_data(Node * head,int index){
     Node *temp=head;
     int i=0;
     while(temp!=NULL){
        if(i==index){
            return temp->data;
        }
        i++;
        temp=temp->next;
     }
     // temp=NUll;
     assert(0);

}

Node * takeInput(){
    int data;
    cin>>data;
    Node * head=NULL;
    while(data!=-1){
    //Node n(data);
    Node * NewNode=new Node(data);
    if(head==NULL){
        head=NewNode;
    }else{
        //head->next=NewNode;
        Node * temp =head;
        while(temp->next!=NULL){
            temp=temp->next;
        }
        temp->next=NewNode;
    }
    cin>>data;
    }
    return head;
}

int length (Node * head){
    if(head==NULL){
        return 0;
    }
    return 1+ length(head->next);
}

Node * Delete_Node(Node* head,int pos){
    if(pos==0){
        Node * a=head;
        head=head->next;
        delete a;
        return head;
    }
    int counts=0;
    Node * temp=head;
    while(counts<pos-1  && temp->next!=NULL){
            temp=temp->next;
    counts++;
    }
    if(temp->next!=NULL){
    temp->next=(temp->next)->next;
    }
    return head;
}




Node * Insert_Node(Node * head,int i,int data){
     Node * NewNode=new Node(data);
    int counts=0;
    Node * temp=head;
    if(i==0){
        NewNode->next=head;
        head=NewNode;
        return head;
    }
    while(temp!=NULL && counts<i-1){
        temp=temp->next;
        counts++;
    }
    if(temp!=NULL){
        Node * a=temp->next;
        temp->next=NewNode;
        NewNode->next=a;
    }
    /*NewNode->next=temp->next;
    temp->next=NewNode;*/
    return head;
}

Node * Insert_Node_R(Node * head,int pos,int data){
    if(head==NULL){
        if(pos==0){
            Node * NewNode=new Node(data);
            return NewNode;
        }
    }
    if(pos==0){
        Node * NewNode=new Node(data);
        NewNode->next=head;
        head=NewNode;
        return head;
    }
    Node * New_head_Recursion=Insert_Node_R(head->next,pos-1,data);
    head->next=New_head_Recursion;

    return head;
}

 Node * Delete_Node_R(Node * head ,int pos){
     if(head==NULL){
        return NULL;
     }
     if(pos==0){
        Node * temp=head->next;
        delete head;
        head=temp;
     }
     Node * New_head_Recursion=Delete_Node_R(head->next,pos-1);
    head->next=New_head_Recursion;

    return head;

 }

 void print_ll_reverse(Node * head){
     if(head==NULL){
        return ;
     }
     print_ll_reverse(head->next);
     cout<<head->data<<" ";

 }

 Node * append_n_to_first(Node * head,int n){
     if(head==NULL){
        return head;
     }
    int len=1;
    Node * temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
        len++;
    }
    temp->next=head;
    Node * p=head;
    for(int i=0;i<(len-n-1);i++){
        p=p->next;
    }
    Node * temp1=p->next;
    p->next=NULL;
    return temp1;

 }

 void print_mid(Node * head){
     if(head==NULL){
        return;
     }
     Node *temp=head;
     int len=0;
     while(temp!=NULL){
        temp=temp->next;
        len++;
     }
     temp=head;
     int i=0;
     while(i<(len-1)/2 && temp!=NULL ){
        temp=temp->next;
        i++;
     }
     cout<<temp->data;
 }

 void print_mid_pointer(Node * head){
     Node * slow =head;
     Node * fast=head;
     if(head==NULL){
        return ;
     }
     while( fast->next!=NULL && (fast->next)->next!=NULL){
        slow=slow->next;
        fast=(fast->next)->next;
     }
     cout<<slow->data;
 }

 Node * remove_duplicates(Node * head){
     if(head==NULL){
        return head;
     }
     Node * temp=head;
     Node * next_next;

     while(temp->next!=NULL){
        if(temp->data==(temp->next)->data){
            next_next=(temp->next)->next;
            delete(temp->next);
            temp->next=next_next;
        }else{
            temp=temp->next;
        }
     }
     return head;
 }

 Node * merge_2_sorted_list(Node * head1,Node * head2){
     if(head1==NULL){
        return head2;
     }
     if(head2==NULL){
        return head1;
     }
     if(head1->data<head2->data){
        head1->next=merge_2_sorted_list(head1->next,head2);
        return head1;
     }else{
         head2->next=merge_2_sorted_list(head1,head2->next);
         return head2;
     }
 }


 Node * reverse_ll(Node * head){
     if(head==NULL || head->next==NULL){
        return head;
     }
     Node * reverse_address_head=reverse_ll(head->next);
     Node * tail=head->next;
     tail->next=head;
     head->next=NULL;
     return reverse_address_head;

 }




int main()
{

     /*//Node * head= takeInput();
    Node * head=NULL;
    head=Insert_Node_R(head,0,10);
    head=Insert_Node_R(head,1,20);
    head=Insert_Node_R(head,2,30);
    //head=Delete_Node_R(head,1);
    // print(head);
    //print_ll_reverse(head);
    head=append_n_to_first(head,2);
    print(head);*/
    Node * head=NULL;
    head=Insert_Node_R(head,0,10);
    head=Insert_Node_R(head,1,20);
    head=Insert_Node_R(head,2,30);
    head=Insert_Node_R(head,3,40);
    print(head);
    cout<<endl;
    head=reverse_ll(head);
    print(head);


    /*Node * head1=NULL;
    head1=Insert_Node_R(head1,0,1);
    head1=Insert_Node_R(head1,1,3);
    head1=Insert_Node_R(head1,2,25);
    head1=Insert_Node_R(head1,3,46);
    print(head1);
    cout<<endl;
    Node * merged_head=merge_2_sorted_list(head,head1);
    print(merged_head);*/
    /*cout<<endl;
    //print_mid_pointer(head);
    cout<<endl;
   // cout<<nth_node_data(head,10);
    cout<<endl;
    head=remove_duplicates(head);
    print(head);*/




    return 0;
}
